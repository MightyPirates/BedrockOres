plugins {
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id "com.modrinth.minotaur" version "2.5.0"
    id 'maven-publish'
    id 'idea'
    id 'eclipse'
}

def getGitRef() {
    try {
        final def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--short', 'HEAD'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (final Throwable ignored) {
        return 'unknown'
    }
}

version = "${semver}+${getGitRef()}"
group = maven_group
archivesBaseName = "${rootProject.archives_base_name}-MC${rootProject.minecraft_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'utf-8'
}

repositories {
    maven {
        url 'https://cursemaven.com'
        content { includeGroup "curse.maven" }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // Just for in-dev convenience. Mod doesn't use any JEI APIs.
    runtimeOnly fg.deobf("curse.maven:jei-238222:4239206")
}

minecraft {
    mappings channel: 'official', version: minecraft_version

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'

            mods {
                bedrockores {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'

            mods {
                bedrockores {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'

            args '--mod', 'bedrockores', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources')

            mods {
                bedrockores {
                    source sourceSets.main
                }
            }
        }
    }
}

task copyGeneratedResources(type: Copy) {
    from 'src/generated'
    into 'src/main'
    exclude 'resources/.cache'
}

processResources {
    inputs.property "version", semver

    filesMatching("META-INF/mods.toml") {
        expand "version": semver
    }
}

jar {
    finalizedBy 'reobfJar'

    manifest {
        attributes([
                'Specification-Title'     : 'bedrockores',
                'Specification-Vendor'    : 'Sangar',
                'Specification-Version'   : '1',
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : version,
                'Implementation-Vendor'   : 'Sangar',
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = "${rootProject.archives_base_name}-${rootProject.minecraft_version}-${project.name}"
            from components.java
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = System.getenv("GITHUB_MAVEN_URL") ?: ""
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

curseforge {
    apiKey = System.getenv('CURSEFORGE_API_KEY') ?: ""
    project {
        id = curse_project_id
        releaseType = "release"
        changelogType = "markdown"
        changelog = System.getenv("CHANGELOG") ?: "Changelog not available."
        addGameVersion 'Forge'
        addGameVersion minecraft_version
        addGameVersion "Java 17"
    }
}

modrinth {
    token = System.getenv("MODRINTH_API_KEY") ?: ""
    projectId = rootProject.modrinth_project_id
    changelog = System.getenv("CHANGELOG") ?: "Changelog not available."
    versionNumber = "MC${minecraft_version}-${semver}"
    versionName = "${archives_base_name}-${version}"
    versionType = "release"
    gameVersions = [rootProject.minecraft_version]
    loaders = ["forge"]
}

idea {
    module {
        for (final String exclude in ["out", "logs"]) {
            excludeDirs += file(exclude)
        }
    }
}
