[
  {
    "comment": [
      "This entry is an example for an bedrock ore candidate. All field values in this",
      "entry represent the default values used if a field is omitted in an entry. Except",
      "for the block state, that'd be empty if omitted.",
      "",
      "Note that you can add as many JSON files to this directory as you like, as long",
      "as they follow the format of this one; they will all be loaded in natural sort",
      "order (i.e. `file4.json` is loaded before `file10.json`). This is relevant",
      "because entries with block states that have been loaded before will be updated",
      "with the values of a newly parsed entry, but only the fields defined are",
      "overwritten. This way you can easily change single values of built-in entries",
      "without having to copy-paste the full entry.",
      "",
      "Explanation of the fields:",
      "  enabled   -- handy to quickly disable ores without removing them ore setting",
      "               their weight to zero.",
      "  comment   -- just that, a comment field, useful to document ore settings.",
      "  state     -- defines the actual ore that will be dropped by the bedrock ore.",
      "               This is a block state as is used to represent the low-level state",
      "               of any single block in the world. For very simple blocks there",
      "               won't even be any properties to configure. For more complex blocks,",
      "               or more commonly for mod ores where multiple ores share one block",
      "               id, properties are used to distinguish these sub-blocks. To see what",
      "               properties define a specific block in the world, use the debug",
      "               overlay (F3) and have a look at the lower right. You'll see the block",
      "               name followed by any set properties in brackets (if any), e.g.",
      "               `id[foo=bar]` would become `{'name':'id', properties:{'foo':'bar'}`.",
      "",
      "  dimensionFilter -- One of {whitelist, blacklist}, defines whether ore may spawn",
      "               only in specified dimensions (whitelist) or all dimensions but the",
      "               specified ones (blacklist).",
      "  dimensionSelector -- One of {name, id}, defines whether dimensions are specified",
      "               by their type (type) or by their numeric id (id). When type, legal",
      "               values are 'overworld', 'nether' and '*' (for any).",
      "  dimension -- allows defining what dimensions an ore can be generated in. See",
      "               dimensionSelector for format of entries. When there's only a single",
      "               value, may be specified as a single string for convenience. When",
      "               more than one value, must be a n array of strings.",
      "",
      "  biomeFilter -- One of {whitelist, blacklist}, defines whether ore may spawn",
      "               only in specified biomes (whitelist) or all biomes but the specified",
      "               ones (blacklist).",
      "  biomeSelector -- One of {name, id, dictionary}, defines whether biomes are",
      "               specified by their type (name), their registry name (id) or their",
      "               biome dictionary type. When 'name', legal values are 'desert', 'warm',",
      "                'cool', 'icy' and '*' (for any), and possibly more depending on",
      "               what types mods may add. When 'dictionary', legal values depend on",
      "               what biomes are registered in the biome dictionary; default values",
      "               for dictionary types include 'hot', 'cold', 'sparse', 'spooky' etc.",
      "  biome     -- allows defining what biomes an ore can be generated in. See",
      "               biomeSelector for format of entries. When there's only a single",
      "               value, may be specified as a single string for convenience. When",
      "               more than one value, must be a n array of strings.",
      "",
      "  weight    -- this defines the weight of the ore type in relation to others.",
      "               It is used to determine which ore to use when generating a vein.",
      "               A weight divided by the sum of all weights of ores that are also",
      "               valid results in the probability of the ore being picked.",
      "",
      "  width*    -- the min and max width of a vein. This defines the horizontal",
      "               'bounds' of a vein (their actual top-view shape is an ellipse).",
      "               This is more or less decorative, but the wider a vein the easier",
      "               it will be to find. Max value is 8.",
      "  height*   -- the min and max height (y levels) of a vein. Note that his is the",
      "               size going down, starting at the base y level as configured in the",
      "               config. So if e.g. the base Y is 5 and the min and max height is 2",
      "               the vein will cover y levels 4 and 5 (unless not a single bedrock",
      "               block was found on level 5, then it'll be 3 and 4, etc).",
      "  count*    -- the min and max number of of blocks to generate per vein. If the",
      "               max is larger than the number of candidate blocks the yield is",
      "               simply distributed across the blocks that *do* exist.",
      "  yield*    -- the min and max amount of actual resources contained in a vein.",
      "               This is the number of times a player can harvest the bedrock ores",
      "               in the vein/the miner can pull a block from the vein. The actual",
      "               yields will be distributed across all the blocks in the vein.",
      "",
      "  group     -- Name of the group of ores this entry falls into. This is used to",
      "               group ores from different mods that represent the same thing, e.g.",
      "               'copper' together; for each group, only one entry is kept, the one",
      "               with the lowest groupOrder.",
      "  groupOder -- The order in the group of ores for this entry. Lower values are",
      "               preferred; imagine the list of grouped ores being sorted from low",
      "               to high using this number, the one with the lowest number is the",
      "               one that'll be kept.",
      "",
      "  extractionCooldownScale -- A multiplier applied to the miner's extraction",
      "               cooldown when mining this particular ore. For example, when this",
      "               is set to 2, it will take it twice as long to extract an ore of",
      "               this type, therefore also requiring twice as much fuel."
    ],
    "enabled": true,
    "state": {
      "name": "example_mod_id:example_mod_block_name",
      "properties": {
        "example_property_name": "example_property_value"
      }
    },
    "dimensionFilter": "whitelist",
    "dimensionSelector": "type",
    "dimension": [ "overworld", "miningworld" ],
    "biomeFilter": "whitelist",
    "biomeSelector": "id",
    "biome": [ "*" ],
    "weight": 10,
    "widthMin": 2,
    "widthMax": 4,
    "heightMin": 2,
    "heightMax": 4,
    "countMin": 5,
    "countMax": 10,
    "yieldMin": 100,
    "yieldMax": 125,
    "group": "",
    "groupOrder": 0,
    "extractionCooldownScale": 1
  }
]